@import "themes/colours";

/**
  See : https://gist.github.com/Jakobud/7f6f4d59ff65ea1bb33beb1c8121e926

  @param {map} $map - A SASS map of viewport width and size value combinations
  @return Linear equation as a calc() function
  @example
  font-size: least-squares-fit((576: 24, 768: 24, 992: 34));
**/
@function least-squares-fit($map) {

  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "leastSquaresFit() $map must be at least 2 values"
  }

  // Calculate the Means
  $resTotal: 0;
  $valueTotal: 0;
  @each $res, $value in $map {
    $resTotal: $resTotal + $res;
    $valueTotal: $valueTotal + $value;
  }
  $resMean: $resTotal/$length;
  $valueMean: $valueTotal/$length;

  // Calculate some other stuff
  $multipliedDiff: 0;
  $squaredDiff: 0;
  @each $res, $value in $map {

    // Differences from means
    $resDiff: $res - $resMean;
    $valueDiff: $value - $valueMean;

    // Sum of multiplied differences
    $multipliedDiff: $multipliedDiff + ($resDiff * $valueDiff);

    // Sum of squared resolution differences
    $squaredDiff: $squaredDiff + ($resDiff * $resDiff);
  }

  // Calculate the Slope
  $m: $multipliedDiff / $squaredDiff;

  // Calculate the Y-Intercept
  $b: $valueMean - ($m * $resMean);

  // Return the CSS calc equation
  @return calc(#{$m*100}vw + #{$b}px);

}

// Example of using LSF for adjusting font sizes based on custom device width settings as supplied in the $map
//  p {
//    $map: (576: 19, 768: 19, 992:19);
//    font-size: least-squares-fit($map) !important;
//  }
//
//  h1 {
//    $map: (576: 28, 768: 28, 992:30);
//    font-size: least-squares-fit($map) !important;
//  }
//
//  h2 {
//    $map: (576: 20, 768: 24, 992: 22);
//    font-size: least-squares-fit($map) !important;
//  }
//
//  .btn-block h2{
//    $map: (576: 20, 768: 24, 992: 20);
//    font-size: least-squares-fit($map) !important;
//  }
//
//  h3 {
//    $map: (576: 24, 768: 20, 992: 24);
//    font-size: least-squares-fit($map) !important;
//  }

/* use this class to attach this font to any element i.e. <p class="fontsforweb_fontid_12950">Text with this font applied</p> */

body {
  font-family: 'Roboto', sans-serif;
  font-size: 1rem;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Roboto', sans-serif;
  font-weight: 400;
}

span, label, a{
  font-weight: 300;
}

a{
  text-decoration: none;
}

// Style for Panels

.setCenter {
  text-align: center;
}
.pageContent {
  .panelFonts {
    h2 {
      font-size: 40px;
      color: $clrD1;
    }
    h3 {
      font-size: 30px;
      color: $clrD1;
    }
    p {
      font-size: 20px !important;
      line-height: 30px;
      color: $clrL1;
    }
  }
}

/*Mobile View Layout*/

.pageContent {

  .headerFonts {
    h2 {
      font-size: 50px;
      color: $clrL5;
    }
    p {
      font-size: 30px !important;
      line-height: inherit;
      color: $clrL3;
    }
  }
  h1, h2, h3, h4, h5 {
    display: inline-block;
    font-weight: 300;
    margin: 0.2em 0;

    &.nb {
      border: none;
    }
    &.nm {
      margin: 0;
    }

  }

  h1 {
    $map: (576: 22, 768: 24, 1500: 26);
    font-size: least-squares-fit($map);
    //margin-bottom: 16px;
  }

  h2 {
    $map: (576: 20, 768: 21, 1500: 22);
    font-size: least-squares-fit($map);
  }

  h3 {
    $map: (576: 19, 768: 20, 1500:20);
    font-size: least-squares-fit($map);
  }

  h4 {
    $map: (360: 22, 768: 15, 1500:20);
    font-size: least-squares-fit($map);
  }

  //p{
  //  font-size: 1.2rem;
  //}
  p {
    $map: (576: 18, 768: 19, 1500:18);
    font-size: least-squares-fit($map) !important;
    $map: (576: 25, 768: 26, 1680:25);
    line-height: least-squares-fit($map);
    color: #505050;
    margin-bottom: 0.8rem;
  }
}

li , p, button, th, td{
  font-weight: 300;
}

/*Tablet Layout CSS*/
@media (min-width: $bp834) {

}

/*Desktop Layout CSS*/
@media (min-width: $bp1280) {


}